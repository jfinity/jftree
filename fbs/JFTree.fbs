// $ flatc --gen-mutable --es6-js-export --js JFTree.fbs

namespace JF.Tree; // joint-fork

enum CollatorLocaleMatcher : uint8 {
  BestFit = 0,

  Lookup
}

enum CollatorUsage : uint8 {
  Sort = 0,

  Search
}

enum CollatorSensitivity : uint8 {
  Variant = 0,

  Base,
  Accent,
  Case
}

enum CollatorCaseFirst : uint8 {
  False = 0,

  Upper,
  Lower
}

table Collation {
  locales: [string];

  localeMatcher: CollatorLocaleMatcher;

  usage: CollatorUsage;

  sensitivity: CollatorSensitivity;

  caseFirst: CollatorCaseFirst;

  ignorePunctuation: bool;

  numeric: bool;
}

table KeyRange {
  lower: string;
  upper: string;
}

table Joint {
  version: float64; // monotonic ticker

  basis: float64; // monotonic checksum (rebase detection)

  series: string (required); // repository identifier
}

table Val {
  key: string; // "lists" use to id presences

  data: [ubyte] (required);

  joint: [ubyte] (required, nested_flatbuffer: "Joint");
}

table Stem {
  ego: string (required);

  joint: [ubyte] (required, nested_flatbuffer: "Joint");

  collation: Collation; // indicates sorting order of keys
  // (consider if there is a "hash" alternative for collation)

  inner: KeyRange (required);
  outer: KeyRange;

  vals: [Val];
  stems: [Stem];
  gauges: [float64]; // approx. bytesize by stem "depth"
  offsets: [int64];

  height: int8 = 0;
}

table Fork {
  joint: [ubyte] (required, nested_flatbuffer: "Joint");

  head: Delta (required);

  upstream: Stem; // []Joint (ancestor fork points)
  merged: Stem; // []Joint (siblings, niblings, and removals)

  log: Stem; // []Delta
}

table Delta {
  ego: string (required);

  command: string; // ego of conceptual change representation

  now: Stem; // {}Val
  then: Stem; // {}Val

  queries: Stem; // read []Range post "fork" (w.r.t. "now")
}

union Range { KeyRange, WidthRange }

table WidthRange {
  key: string;
  offset: int64;
  width: int64;
}

root_type Val;
root_type Stem;
root_type Fork;
root_type Joint;
root_type Delta;

// remember that decoding keys is secondary to ordering them
// (paired-values are already decoded)

// use cockroachdb to cache Tree.Stem records
// support a "lagging" replica of the "main" fork in dgraph

// provided tree access, a key-range is a pair of indices
